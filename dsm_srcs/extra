
size_t	get_tdir_size(unsigned char op_code)
{
	if (op_code == 0x09 || op_code == 0x0a || op_code == 0x0b
		|| op_code == 0x0c || op_code == 0x0e || op_code == 0x0f)
		return (2);
	return (4);
}

short	to_2bytes(unsigned char one, unsigned char two)
{
	short ret;

	ret = 0;
	ret = ret | ((short)one) << 8;
	ret = ret | (short)two;
	return (ret);
}

int		to_4bytes(unsigned short one, unsigned short two)
{
	int ret;

	ret = 0;
	ret = ret | ((int)one) << 16;
	ret = ret | (int)two;
	return (ret);
}


int	get_bit(unsigned char octet, int index)
{
	int shift_right;

	if (index < 0 || index > 8)
		return (-1);
	shift_right = 7;
	octet = octet << index;
	octet = octet >> shift_right;
	if ((1 & octet) == 1)
		return (1);
	return (0);
}




static	int		print_arg_type(int op_code, int one, int two)
{
	if (one == 0 && two == 1)
	{
		ft_putstr("	T_REG	");
		return (1);
	}
	else if (one == 1 && two == 0)
	{
		ft_putstr("	T_DIR	");
		return (get_tdir_size(op_code));
	}
	else if (one == 1 && two == 1)
	{
		ft_putstr("	T_IND	");
		return (2);
	}
	return (0);
}


static void	write_op(int fd, int op_code ,t_file *file)
{
	t_op			local_op;

	if (op_code <= 0 || op_code > 16)
	{
		ft_printf("Could not find operation code\n");
		exit(-1);
	}
	ft_printf("op_code = %d, opcode = %s\n", op_code, file->op_tab[op_code]);
	local_op = file->op_tab[op_code];
	ft_putstr_fd((const char*)local_op.name, fd);
	ft_putchar_fd(' ', fd);
}

static void	write_arg(int fd, int index, int arg_size, const char *prog_code)
{
	if (arg_size == 1)
	{
		ft_putstr_fd(prog_code, fd);
		ft_putstr_fd("test ", fd);
	}
	else if (arg_size == 2)
		ft_putnbr(to_2bytes(prog_code[index], prog_code[index + 1]));
	else if (arg_size == 4)
	{
		ft_putnbr(
			to_4bytes(
				to_2bytes(
					prog_code[index], prog_code[index + 1]),
				to_2bytes(
					prog_code[index + 2], prog_code[index + 3])));
	}
}


///////////////////
static	int		parse_encbyte(int fd, int i, const char *exec, unsigned char oct, int op_code)
{
	int	arg_size_1;
	int arg_size_2;
	int arg_size_3;

	ft_putstr("	");
	arg_size_1 = print_arg_type(op_code, get_bit(oct, 0), get_bit(oct, 1));
	write_arg(fd, i, arg_size_1, exec);
	arg_size_2 = print_arg_type(op_code, get_bit(oct, 2), get_bit(oct, 3));
	i += arg_size_1;
	write_arg(fd, i, arg_size_2, exec);
	arg_size_3 = print_arg_type(op_code, get_bit(oct, 4), get_bit(oct, 5));
	i += arg_size_2;
	write_arg(fd, i, arg_size_3, exec);
	return (arg_size_1 + arg_size_2 + arg_size_3);
}
///////////
